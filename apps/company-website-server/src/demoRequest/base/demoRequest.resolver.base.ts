/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DemoRequest } from "./DemoRequest";
import { DemoRequestCountArgs } from "./DemoRequestCountArgs";
import { DemoRequestFindManyArgs } from "./DemoRequestFindManyArgs";
import { DemoRequestFindUniqueArgs } from "./DemoRequestFindUniqueArgs";
import { CreateDemoRequestArgs } from "./CreateDemoRequestArgs";
import { UpdateDemoRequestArgs } from "./UpdateDemoRequestArgs";
import { DeleteDemoRequestArgs } from "./DeleteDemoRequestArgs";
import { DemoRequestService } from "../demoRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DemoRequest)
export class DemoRequestResolverBase {
  constructor(
    protected readonly service: DemoRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DemoRequest",
    action: "read",
    possession: "any",
  })
  async _demoRequestsMeta(
    @graphql.Args() args: DemoRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DemoRequest])
  @nestAccessControl.UseRoles({
    resource: "DemoRequest",
    action: "read",
    possession: "any",
  })
  async demoRequests(
    @graphql.Args() args: DemoRequestFindManyArgs
  ): Promise<DemoRequest[]> {
    return this.service.demoRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DemoRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DemoRequest",
    action: "read",
    possession: "own",
  })
  async demoRequest(
    @graphql.Args() args: DemoRequestFindUniqueArgs
  ): Promise<DemoRequest | null> {
    const result = await this.service.demoRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DemoRequest)
  @nestAccessControl.UseRoles({
    resource: "DemoRequest",
    action: "create",
    possession: "any",
  })
  async createDemoRequest(
    @graphql.Args() args: CreateDemoRequestArgs
  ): Promise<DemoRequest> {
    return await this.service.createDemoRequest({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DemoRequest)
  @nestAccessControl.UseRoles({
    resource: "DemoRequest",
    action: "update",
    possession: "any",
  })
  async updateDemoRequest(
    @graphql.Args() args: UpdateDemoRequestArgs
  ): Promise<DemoRequest | null> {
    try {
      return await this.service.updateDemoRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DemoRequest)
  @nestAccessControl.UseRoles({
    resource: "DemoRequest",
    action: "delete",
    possession: "any",
  })
  async deleteDemoRequest(
    @graphql.Args() args: DeleteDemoRequestArgs
  ): Promise<DemoRequest | null> {
    try {
      return await this.service.deleteDemoRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
