/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DemoRequest as PrismaDemoRequest } from "@prisma/client";

export class DemoRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DemoRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.demoRequest.count(args);
  }

  async demoRequests(
    args: Prisma.DemoRequestFindManyArgs
  ): Promise<PrismaDemoRequest[]> {
    return this.prisma.demoRequest.findMany(args);
  }
  async demoRequest(
    args: Prisma.DemoRequestFindUniqueArgs
  ): Promise<PrismaDemoRequest | null> {
    return this.prisma.demoRequest.findUnique(args);
  }
  async createDemoRequest(
    args: Prisma.DemoRequestCreateArgs
  ): Promise<PrismaDemoRequest> {
    return this.prisma.demoRequest.create(args);
  }
  async updateDemoRequest(
    args: Prisma.DemoRequestUpdateArgs
  ): Promise<PrismaDemoRequest> {
    return this.prisma.demoRequest.update(args);
  }
  async deleteDemoRequest(
    args: Prisma.DemoRequestDeleteArgs
  ): Promise<PrismaDemoRequest> {
    return this.prisma.demoRequest.delete(args);
  }
}
